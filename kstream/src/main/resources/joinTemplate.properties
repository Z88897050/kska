####################################################
################### stream topic ###################
#### 支持以下方式：
#### KTable [join,leftJoin,outerJoin] KTable
#### KStream [join,leftJoin,outerJoin] KStream
#### KStream [join,leftJoin] KTable
#### encoding----UTF-8
operation.name=
# join,leftJoin,outerJoin,注意这三个名称区分大小写
operation.operator=
# 执行join操作的kSource名称
operation.ks.name=
# 如果操作的kSource是table,提供自定义的storeName,会生成topic.
# table-table建议配置
# stream-stream,stream-table不需要这个配置
operation.table.store=
# 执行join操作的目标kSource名称
join.ks.name=
# source的partition与target不一致,运行前手动创建一个与target相同partition的topic,默认分区方式
join.source.through=
# target的partition与source不一致,运行前手动创建一个与source相同partition的topic,默认分区方式
join.target.through=
# 如果operation.ks与join.ks两者有一者为table,则before,after,retention无需配置.
# SELECT * FROM stream1, stream2 WHERE stream1.key = stream2.key AND stream1.ts - before <= stream2.ts AND stream2.ts <= stream1.ts + after
# There are three different window configuration supported:
# 1,before = after = time-difference;2,before = 0 and after = time-difference;3,before = time-difference and after = 0
join.beforeMs=0
join.afterMs=0
# retentionMs > before+after
join.retentionMs=1
# 输出策略,cover:相同子段覆盖;uncover:相同的子段后缀添加数字,默认cover.区分大小写.如f=>f1,f1=>f11...
join.output.strategy=
# 输出策略外的允许同名字段值追加,优先级高于输出策略,半角逗号分隔
join.output.fields.value.add=
# 值追加间隔符.默认','
join.output.fields.value.add.interval=